// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pb/assess.proto

package assess

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssessServiceClient is the client API for AssessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssessServiceClient interface {
	Assess(ctx context.Context, in *AssessRequest, opts ...grpc.CallOption) (*AssessResponse, error)
}

type assessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssessServiceClient(cc grpc.ClientConnInterface) AssessServiceClient {
	return &assessServiceClient{cc}
}

func (c *assessServiceClient) Assess(ctx context.Context, in *AssessRequest, opts ...grpc.CallOption) (*AssessResponse, error) {
	out := new(AssessResponse)
	err := c.cc.Invoke(ctx, "/AssessService/Assess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssessServiceServer is the server API for AssessService service.
// All implementations must embed UnimplementedAssessServiceServer
// for forward compatibility
type AssessServiceServer interface {
	Assess(context.Context, *AssessRequest) (*AssessResponse, error)
	mustEmbedUnimplementedAssessServiceServer()
}

// UnimplementedAssessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssessServiceServer struct {
}

func (UnimplementedAssessServiceServer) Assess(context.Context, *AssessRequest) (*AssessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assess not implemented")
}
func (UnimplementedAssessServiceServer) mustEmbedUnimplementedAssessServiceServer() {}

// UnsafeAssessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssessServiceServer will
// result in compilation errors.
type UnsafeAssessServiceServer interface {
	mustEmbedUnimplementedAssessServiceServer()
}

func RegisterAssessServiceServer(s grpc.ServiceRegistrar, srv AssessServiceServer) {
	s.RegisterService(&AssessService_ServiceDesc, srv)
}

func _AssessService_Assess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessServiceServer).Assess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AssessService/Assess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessServiceServer).Assess(ctx, req.(*AssessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssessService_ServiceDesc is the grpc.ServiceDesc for AssessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AssessService",
	HandlerType: (*AssessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Assess",
			Handler:    _AssessService_Assess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/assess.proto",
}
